/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package smsfinal;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.TableCellRenderer;


/**
 *
 * @author Derrick Witness
 */
public class ClassExamView extends javax.swing.JDialog {
    DisplayTrayIcon DTI = new DisplayTrayIcon();
    Connection conn = null;
    Statement stm = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    
    /**
     * Creates new form ClassExamView
     */
    public ClassExamView(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        SimpleDateFormat D = new SimpleDateFormat("yyyy");
        Date  dat = new Date();
        String siku = D.format(dat);
        combo_year.addItem("--Select Year--");
        int index = 1;
        for (int i = Integer.parseInt(siku); i > 2014; i--)
        {
           combo_year.addItem(String.valueOf(i));
          index++;
        }
        //iconMethod();
        
        TableCellRenderer rendererFromHeader = student_exam.getTableHeader().getDefaultRenderer();
        JLabel headerLabel = (JLabel) rendererFromHeader;
        //headerLabel.setHorizontalAlignment(JLabel.CENTER);
        student_exam.getTableHeader().setOpaque(false);
        Color blueColor = new Color(102,255,255);
        student_exam.getTableHeader().setBackground(blueColor);
    }
   public void iconMethod()
    {
        ClassExamView ce = new ClassExamView(null, rootPaneCheckingEnabled);
       ce.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("students.png")));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        combo_exam = new javax.swing.JComboBox();
        combo_term = new javax.swing.JComboBox();
        combo_year = new javax.swing.JComboBox();
        combo_form = new javax.swing.JComboBox();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        student_exam = new javax.swing.JTable()
        {

            public Component prepareRenderer(TableCellRenderer renderer, int row, int column){
                Component returnComp = super.prepareRenderer(renderer, row, column);
                Color alternateColor = Color.white;
                Color blueColor = new Color(102,255,255);
                if (!returnComp.getBackground().equals(getSelectionBackground())){
                    Color bg = (row % 2 == 0 ? alternateColor : blueColor);
                    returnComp .setBackground(bg);
                    bg = null;
                }
                return returnComp;

            }
        };
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setType(java.awt.Window.Type.UTILITY);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Exam Selection"));

        combo_exam.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select Exam--", "CAT 1", "CAT 2", "END TERM", "AVERAGE" }));
        combo_exam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_examActionPerformed(evt);
            }
        });

        combo_term.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select Term--", "1", "2", "3" }));
        combo_term.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_termActionPerformed(evt);
            }
        });

        combo_year.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_yearActionPerformed(evt);
            }
        });

        combo_form.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select Form--", "1", "2", "3", "4" }));
        combo_form.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_formActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(combo_year, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(combo_term, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(combo_exam, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(combo_form, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_exam, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_term, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_form, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_year, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );

        student_exam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Adm No", "Name", "KCPE", "ENG", "KIS", "MAT", "BIO", "PHY", "CHEM", "HIST", "GEO", "CRE", "AGR", "B/S", "MM", "MGD"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        student_exam.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        student_exam.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(student_exam);
        if (student_exam.getColumnModel().getColumnCount() > 0) {
            student_exam.getColumnModel().getColumn(0).setResizable(false);
            student_exam.getColumnModel().getColumn(0).setPreferredWidth(50);
            student_exam.getColumnModel().getColumn(1).setResizable(false);
            student_exam.getColumnModel().getColumn(1).setPreferredWidth(200);
            student_exam.getColumnModel().getColumn(2).setResizable(false);
            student_exam.getColumnModel().getColumn(2).setPreferredWidth(45);
            student_exam.getColumnModel().getColumn(3).setResizable(false);
            student_exam.getColumnModel().getColumn(3).setPreferredWidth(45);
            student_exam.getColumnModel().getColumn(4).setResizable(false);
            student_exam.getColumnModel().getColumn(4).setPreferredWidth(45);
            student_exam.getColumnModel().getColumn(5).setResizable(false);
            student_exam.getColumnModel().getColumn(5).setPreferredWidth(45);
            student_exam.getColumnModel().getColumn(6).setResizable(false);
            student_exam.getColumnModel().getColumn(6).setPreferredWidth(45);
            student_exam.getColumnModel().getColumn(7).setResizable(false);
            student_exam.getColumnModel().getColumn(7).setPreferredWidth(45);
            student_exam.getColumnModel().getColumn(8).setResizable(false);
            student_exam.getColumnModel().getColumn(8).setPreferredWidth(45);
            student_exam.getColumnModel().getColumn(9).setResizable(false);
            student_exam.getColumnModel().getColumn(9).setPreferredWidth(45);
            student_exam.getColumnModel().getColumn(10).setResizable(false);
            student_exam.getColumnModel().getColumn(10).setPreferredWidth(45);
            student_exam.getColumnModel().getColumn(11).setResizable(false);
            student_exam.getColumnModel().getColumn(11).setPreferredWidth(45);
            student_exam.getColumnModel().getColumn(12).setResizable(false);
            student_exam.getColumnModel().getColumn(12).setPreferredWidth(45);
            student_exam.getColumnModel().getColumn(13).setResizable(false);
            student_exam.getColumnModel().getColumn(13).setPreferredWidth(45);
            student_exam.getColumnModel().getColumn(14).setPreferredWidth(50);
            student_exam.getColumnModel().getColumn(15).setResizable(false);
            student_exam.getColumnModel().getColumn(15).setPreferredWidth(45);
        }

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                .addContainerGap())
        );
        jDesktopPane1.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/attatchments/bar-code_48x48.png"))); // NOI18N
        jButton1.setText("PRINT MARK LIST");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(338, 338, 338)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jDesktopPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jDesktopPane1)
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void combo_formActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_formActionPerformed
        DbConnection Connect = new DbConnection();
        conn = Connect.Connectdb();
        String frm = (String) combo_form.getSelectedItem();
        String yr = (String) combo_year.getSelectedItem();
        String tm = (String) combo_term.getSelectedItem();
        
            if(!combo_form.getSelectedItem().equals("--Select Form--"))
            {
                if(combo_year.getSelectedItem().equals("--Select Year--"))
                {
                    JOptionPane.showMessageDialog( this, "Kindly check your year selection.","Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if(combo_term.getSelectedItem().equals("--Select Term--"))
                {
                    JOptionPane.showMessageDialog( this, "Kindly check your term selection.","Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                if(combo_exam.getSelectedItem().equals("CAT 1"))
                {
                   // refreshFormcat1();
                    try{
                        String getCat1 ="SELECT * FROM `cat_one` WHERE `form` = '"+frm+"' AND `yearr` ='"+yr+"' AND `term` ='"+tm+"'  ORDER BY `meanmark` desc";
                        stm = conn.createStatement();
                        rs = stm.executeQuery(getCat1);
                        
                        int r = 0;
                        while(rs.next())
                        {
                          student_exam.setValueAt(rs.getString("adm"), r, 0); 
                          student_exam.setValueAt(rs.getString("name"), r, 1);
                         // student_exam.setValueAt(rs.getString("stream"), r, 2);
                          student_exam.setValueAt(rs.getString("kcpe"), r, 2);
                          student_exam.setValueAt(rs.getString("eng"), r, 3); 
                          student_exam.setValueAt(rs.getString("kis"), r, 4);
                          student_exam.setValueAt(rs.getString("mat"), r, 5);
                          student_exam.setValueAt(rs.getString("bio"), r, 6);
                          student_exam.setValueAt(rs.getString("phy"), r, 7);
                          student_exam.setValueAt(rs.getString("che"), r, 8);
                          student_exam.setValueAt(rs.getString("his"), r, 9);
                          student_exam.setValueAt(rs.getString("geo"), r, 10);
                          student_exam.setValueAt(rs.getString("cre"), r, 11);
                          student_exam.setValueAt(rs.getString("agr"), r, 12);
                          student_exam.setValueAt(rs.getString("bst"), r, 13);
                          student_exam.setValueAt(rs.getString("meanmark"), r, 14);
                          student_exam.setValueAt(rs.getString("meangrd"), r, 15);
                          r++;
                        }
                        rs.close();
                        conn.close(); 
                        
                    }catch(Exception e)
                    {
                    e.printStackTrace();
                    }
                
                }else if(combo_exam.getSelectedItem().equals("CAT 2"))
                {
                   // refreshFormcat2();
                     try{
                        String getCat2 ="SELECT * FROM `cat_two` WHERE `form` = '"+frm+"' AND `yearr` ='"+yr+"' AND `term` ='"+tm+"'  ORDER BY `meanmark` desc";
                        stm = conn.createStatement();
                        rs = stm.executeQuery(getCat2);
                        
                        int r = 0;
                        while(rs.next())
                        {
                          student_exam.setValueAt(rs.getString("adm"), r, 0); 
                          student_exam.setValueAt(rs.getString("name"), r, 1);
                         // student_exam.setValueAt(rs.getString("stream"), r, 2);
                          student_exam.setValueAt(rs.getString("kcpe"), r, 2);
                          student_exam.setValueAt(rs.getString("eng"), r, 3); 
                          student_exam.setValueAt(rs.getString("kis"), r, 4);
                          student_exam.setValueAt(rs.getString("mat"), r, 5);
                          student_exam.setValueAt(rs.getString("bio"), r, 6);
                          student_exam.setValueAt(rs.getString("phy"), r, 7);
                          student_exam.setValueAt(rs.getString("che"), r, 8);
                          student_exam.setValueAt(rs.getString("his"), r, 9);
                          student_exam.setValueAt(rs.getString("geo"), r, 10);
                          student_exam.setValueAt(rs.getString("cre"), r, 11);
                          student_exam.setValueAt(rs.getString("agr"), r, 12);
                          student_exam.setValueAt(rs.getString("bst"), r, 13);
                          student_exam.setValueAt(rs.getString("meanmark"), r, 14);
                          student_exam.setValueAt(rs.getString("meangrd"), r, 15);
                          r++;
                        }
                        rs.close();
                        conn.close(); 
                        
                    }catch(Exception e)
                    {
                    e.printStackTrace();
                    }
                    
              // refreshFormcat2();
                }else if(combo_exam.getSelectedItem().equals("END TERM"))
                {
                  //  refreshFormcat3();
                     try{
                        String getCat3 ="SELECT * FROM `cat_three` WHERE `form` = '"+frm+"' AND `yearr` ='"+yr+"' AND `term` ='"+tm+"'  ORDER BY `meanmark` desc";
                        stm = conn.createStatement();
                        rs = stm.executeQuery(getCat3);
                        
                        int r = 0;
                        while(rs.next())
                        {
                          student_exam.setValueAt(rs.getString("adm"), r, 0); 
                          student_exam.setValueAt(rs.getString("name"), r, 1);
                         // student_exam.setValueAt(rs.getString("stream"), r, 2);
                          student_exam.setValueAt(rs.getString("kcpe"), r, 2);
                          student_exam.setValueAt(rs.getString("eng"), r, 3); 
                          student_exam.setValueAt(rs.getString("kis"), r, 4);
                          student_exam.setValueAt(rs.getString("mat"), r, 5);
                          student_exam.setValueAt(rs.getString("bio"), r, 6);
                          student_exam.setValueAt(rs.getString("phy"), r, 7);
                          student_exam.setValueAt(rs.getString("che"), r, 8);
                          student_exam.setValueAt(rs.getString("his"), r, 9);
                          student_exam.setValueAt(rs.getString("geo"), r, 10);
                          student_exam.setValueAt(rs.getString("cre"), r, 11);
                          student_exam.setValueAt(rs.getString("agr"), r, 12);
                          student_exam.setValueAt(rs.getString("bst"), r, 13);
                          student_exam.setValueAt(rs.getString("meanmark"), r, 14);
                          student_exam.setValueAt(rs.getString("meangrd"), r, 15);
                          r++;
                        }
                        rs.close();
                        conn.close(); 
                        
                    }catch(Exception e)
                    {
                    e.printStackTrace();
                    }
                    
                }else if(combo_exam.getSelectedItem().equals("AVERAGE"))
                {
                    //refreshFormavg();
                     try{
                        String getAvg ="SELECT * FROM `cat_avg` WHERE `form` = '"+frm+"' AND `yearr` ='"+yr+"' AND `term` ='"+tm+"'  ORDER BY `meanmark` desc";
                        stm = conn.createStatement();
                        rs = stm.executeQuery(getAvg);
                        
                        int r = 0;
                        while(rs.next())
                        {
                          student_exam.setValueAt(rs.getString("adm"), r, 0); 
                          student_exam.setValueAt(rs.getString("name"), r, 1);
                         // student_exam.setValueAt(rs.getString("stream"), r, 2);
                          student_exam.setValueAt(rs.getString("kcpe"), r, 2);
                          student_exam.setValueAt(rs.getString("eng"), r, 3); 
                          student_exam.setValueAt(rs.getString("kis"), r, 4);
                          student_exam.setValueAt(rs.getString("mat"), r, 5);
                          student_exam.setValueAt(rs.getString("bio"), r, 6);
                          student_exam.setValueAt(rs.getString("phy"), r, 7);
                          student_exam.setValueAt(rs.getString("che"), r, 8);
                          student_exam.setValueAt(rs.getString("his"), r, 9);
                          student_exam.setValueAt(rs.getString("geo"), r, 10);
                          student_exam.setValueAt(rs.getString("cre"), r, 11);
                          student_exam.setValueAt(rs.getString("agr"), r, 12);
                          student_exam.setValueAt(rs.getString("bst"), r, 13);
                          student_exam.setValueAt(rs.getString("meanmark"), r, 14);
                          student_exam.setValueAt(rs.getString("meangrd"), r, 15);
                          r++;
                        }
                        rs.close();
                        conn.close(); 
                        
                    }catch(Exception e)
                    {
                    e.printStackTrace();
                    }
                
                }else{
                JOptionPane.showMessageDialog( this, "Kindly check your exam selection.","Error", JOptionPane.ERROR_MESSAGE);
           
            }
              
            }else{
                JOptionPane.showMessageDialog( this, "Kindly check your form selection.","Error", JOptionPane.ERROR_MESSAGE);
           
            }
    }//GEN-LAST:event_combo_formActionPerformed

    private void combo_examActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_examActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_examActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DbConnection Connect = new DbConnection();
        conn = Connect.Connectdb();
        JFileChooser fr = new JFileChooser();
        FileSystemView fw = fr.getFileSystemView();
        String path = fw.getDefaultDirectory() + "/Unyolo/Class marklists";
        File fi_le = new File(path);
        if (!fi_le.exists()) {
            if (fi_le.mkdir()) {
                System.out.println("Directory is created!");
            } else {
                System.out.println("Failed to create directory!");
            }
        }
        String frm = "FORM "+(String) combo_form.getSelectedItem();
        String yr = " "+(String) combo_year.getSelectedItem()+" ";
        String tm = " TERM "+(String) combo_term.getSelectedItem();
        String id = "/"+frm+tm+yr;

        
        if(!combo_year.getSelectedItem().equals("--Select Year--"))
        {
            if(!combo_term.getSelectedItem().equals("--Select Term--"))
            {
                if(!combo_form.getSelectedItem().equals("--Select Form--"))
                {
                        if(combo_exam.getSelectedItem().equals("CAT 1"))
                        {

                        try{
                              Document document = new Document(PageSize.A4.rotate());  
                              FileOutputStream file =  new FileOutputStream(path+id+"CAT 1 marklist.pdf");
                              PdfWriter.getInstance(document, file);

                              document.open();

                              document.add(new Paragraph("                                           UNYOLO MIXED SECONDARY SCHOOL", FontFactory.getFont(FontFactory.TIMES_BOLD, 20, Font.BOLD, BaseColor.BLACK)));
                              document.add(new Paragraph("                                                                                             P.O BOX 31-40620, BORO", FontFactory.getFont(FontFactory.TIMES_BOLD, 14, Font.BOLD, BaseColor.BLACK)));
                              document.add(new Paragraph("\n"));
                              document.add(new Paragraph("                                                                   FORM "+combo_form.getSelectedItem()+" EXAM MARK LIST FOR "+tm+" CAT 1 EXAMS "+yr, FontFactory.getFont(FontFactory.TIMES_BOLD, 13, Font.BOLD, BaseColor.BLACK)));
                              document.add(new Paragraph("\n"));
                              PdfPTable table = new PdfPTable(17);
                              table.setWidthPercentage(100);

                              PdfPCell cell;
                        // we add a cell with colspan 3
                                cell = new PdfPCell(new Phrase("ADM"));
                               // cell.setColspan(3);
                             //   cell.setPadding(4);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("NAME"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("KCPE"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("ENG"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("KIS"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("MAT"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("BIO"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("CHE"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("PHY"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("GEO"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("HIS"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("CRE"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("AGR"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("BST"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase(" TOTAL"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("  MEAN"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("POSITION"));
                                //cell.setRowspan(2);
                                table.addCell(cell);


                              float[] columnWidths = new float[] {5f, 30f, 6f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 8f, 8f, 10f};
                              table.setPaddingTop(TOP_ALIGNMENT);

                              table.setWidths(columnWidths);

                              try{
                                  DbConnection connect = new DbConnection();
                                  conn = connect.Connectdb();
                                            String getCat_one = "SELECT adm, name,form, name, kcpe,eng, kis, mat,bio,che,phy,geo,his,cre,agr,bst,yearr, total, meanmark, term, kcpe, FIND_IN_SET( meanmark, (SELECT GROUP_CONCAT( meanmark ORDER BY meanmark DESC ) FROM cat_one WHERE form = '"+combo_form.getSelectedItem()+"' AND term = '"+combo_term.getSelectedItem()+"' AND yearr = '"+combo_year.getSelectedItem()+"')) AS rank FROM cat_one WHERE form = '"+combo_form.getSelectedItem()+"' AND term = '"+combo_term.getSelectedItem()+"' AND yearr = '"+combo_year.getSelectedItem()+"' ORDER BY meanmark desc";
                                            stm = conn.createStatement();
                                            rs = stm.executeQuery(getCat_one);

                                            while(rs.next())
                                            {
                                                String adm = rs.getString("adm");
                                                String name = rs.getString("name");
                                                String kcpe = rs.getString("kcpe");
                                                String mat = rs.getString("mat");
                                                String eng = rs.getString("eng");
                                                String kis = rs.getString("kis");
                                                String bio = rs.getString("bio");
                                                String che = rs.getString("che");
                                                String phy = rs.getString("phy");
                                                String his = rs.getString("his");
                                                String geo = rs.getString("geo");
                                                String cre = rs.getString("cre");
                                                String agr = rs.getString("agr");
                                                String bst = rs.getString("bst");
                                                String tot = rs.getString("total");
                                                String mm = rs.getString("meanmark");
                                                String ran = rs.getString("rank");

                                                //set to pdf
                                                table.addCell(adm);
                                                table.addCell(name);
                                                table.addCell(kcpe);
                                                table.addCell(eng);
                                                table.addCell(kis);
                                                table.addCell(mat);
                                                table.addCell(bio);
                                                table.addCell(che);
                                                table.addCell(phy);
                                                table.addCell(geo);
                                                table.addCell(his);
                                                table.addCell(cre);
                                                table.addCell(agr);
                                                table.addCell(bst);
                                                table.addCell("   "+tot);
                                                table.addCell("    "+mm);
                                                table.addCell("       "+ran);

                                            }
                              }catch(Exception e)
                              {
                               e.printStackTrace();
                              }
                              document.add(table);
                              document.close();

                             JOptionPane.showMessageDialog(null, "Exam marklist generated succesfully. You can view it in PDF format in the documents folder.");

                            }catch(Exception e)
                            {
                                JOptionPane.showMessageDialog( this, "The marklist has already been generated","Error", JOptionPane.ERROR_MESSAGE);

                            }
                        }else if(combo_exam.getSelectedItem().equals("CAT 2"))
                        {

                        try{
                              Document document = new Document(PageSize.A4.rotate());  
                              FileOutputStream file =  new FileOutputStream(path+id+" CAT 2 marklist.pdf");
                              PdfWriter.getInstance(document, file);

                              document.open();
                              document.add(new Paragraph("                                           UNYOLO MIXED SECONDARY SCHOOL", FontFactory.getFont(FontFactory.TIMES_BOLD, 20, Font.BOLD, BaseColor.BLACK)));
                              document.add(new Paragraph("                                                                                             P.O BOX 31-40620, BORO", FontFactory.getFont(FontFactory.TIMES_BOLD, 14, Font.BOLD, BaseColor.BLACK)));
                              document.add(new Paragraph("\n"));
                              document.add(new Paragraph("                                                                   FORM "+combo_form.getSelectedItem()+" EXAM MARK LIST FOR "+tm+" CAT 1 EXAMS "+yr, FontFactory.getFont(FontFactory.TIMES_BOLD, 13, Font.BOLD, BaseColor.BLACK)));
                              document.add(new Paragraph("\n"));
                              PdfPTable table = new PdfPTable(17);
                              table.setWidthPercentage(100);

                              PdfPCell cell;
                        // we add a cell with colspan 3
                                cell = new PdfPCell(new Phrase("ADM"));
                               // cell.setColspan(3);
                             //   cell.setPadding(4);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("NAME"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("KCPE"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("ENG"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("KIS"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("MAT"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("BIO"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("CHE"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("PHY"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("GEO"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("HIS"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("CRE"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("AGR"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("BST"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase(" TOTAL"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("  MEAN"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("POSITION"));
                                //cell.setRowspan(2);
                                table.addCell(cell);


                              float[] columnWidths = new float[] {5f, 30f, 6f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 8f, 8f, 10f};
                              table.setPaddingTop(TOP_ALIGNMENT);

                              table.setWidths(columnWidths);

                              try{
                                  DbConnection connect = new DbConnection();
                                  conn = connect.Connectdb();
                                            String getCat_two = "SELECT adm, name,form, name, kcpe,eng, kis, mat,bio,che,phy,geo,his,cre,agr,bst,yearr, total, meanmark, term, kcpe, FIND_IN_SET( meanmark, (SELECT GROUP_CONCAT( meanmark ORDER BY meanmark DESC ) FROM cat_two WHERE form = '"+combo_form.getSelectedItem()+"' AND term = '"+combo_term.getSelectedItem()+"' AND yearr = '"+combo_year.getSelectedItem()+"')) AS rank FROM cat_two WHERE form = '"+combo_form.getSelectedItem()+"' AND term = '"+combo_term.getSelectedItem()+"' AND yearr = '"+combo_year.getSelectedItem()+"' ORDER BY meanmark desc";
                                            stm = conn.createStatement();
                                            rs = stm.executeQuery(getCat_two);

                                            while(rs.next())
                                            {
                                                String adm = rs.getString("adm");
                                                String name = rs.getString("name");
                                                String kcpe = rs.getString("kcpe");
                                                String mat = rs.getString("mat");
                                                String eng = rs.getString("eng");
                                                String kis = rs.getString("kis");
                                                String bio = rs.getString("bio");
                                                String che = rs.getString("che");
                                                String phy = rs.getString("phy");
                                                String his = rs.getString("his");
                                                String geo = rs.getString("geo");
                                                String cre = rs.getString("cre");
                                                String agr = rs.getString("agr");
                                                String bst = rs.getString("bst");
                                                String tot = rs.getString("total");
                                                String mm = rs.getString("meanmark");
                                                String ran = rs.getString("rank");

                                                //set to pdf
                                                table.addCell(adm);
                                                table.addCell(name);
                                                table.addCell(kcpe);
                                                table.addCell(eng);
                                                table.addCell(kis);
                                                table.addCell(mat);
                                                table.addCell(bio);
                                                table.addCell(che);
                                                table.addCell(phy);
                                                table.addCell(geo);
                                                table.addCell(his);
                                                table.addCell(cre);
                                                table.addCell(agr);
                                                table.addCell(bst);
                                                table.addCell("   "+tot);
                                                table.addCell("    "+mm);
                                                table.addCell("       "+ran);

                                            }
                              }catch(Exception e)
                              {
                               e.printStackTrace();
                              }
                              document.add(table);
                              document.close();

                          JOptionPane.showMessageDialog(null, "Exam marklist generated succesfully. You can view it in PDF format in the documents folder.");

                            }catch(Exception e)
                            {
                               // e.printStackTrace();
                                JOptionPane.showMessageDialog( this, "The marklist has already been generated","Error", JOptionPane.ERROR_MESSAGE);

                            }
                        }else if(combo_exam.getSelectedItem().equals("END TERM"))
                        {

                        try{
                              Document document = new Document(PageSize.A4.rotate());  
                              FileOutputStream file =  new FileOutputStream(path+id+"END TERM marklist.pdf");
                              PdfWriter.getInstance(document, file);

                              document.open();
                              document.add(new Paragraph("                                           UNYOLO MIXED SECONDARY SCHOOL", FontFactory.getFont(FontFactory.TIMES_BOLD, 20, Font.BOLD, BaseColor.BLACK)));
                              document.add(new Paragraph("                                                                                             P.O BOX 31-40620, BORO", FontFactory.getFont(FontFactory.TIMES_BOLD, 14, Font.BOLD, BaseColor.BLACK)));
                              document.add(new Paragraph("\n"));
                              document.add(new Paragraph("                                                                   FORM "+combo_form.getSelectedItem()+" EXAM MARK LIST FOR "+tm+" END TERM EXAMS "+yr, FontFactory.getFont(FontFactory.TIMES_BOLD, 13, Font.BOLD, BaseColor.BLACK)));
                              document.add(new Paragraph("\n"));
                              PdfPTable table = new PdfPTable(17);
                              table.setWidthPercentage(100);

                              PdfPCell cell;
                        // we add a cell with colspan 3
                                cell = new PdfPCell(new Phrase("ADM"));
                               // cell.setColspan(3);
                             //   cell.setPadding(4);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("NAME"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("KCPE"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("ENG"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("KIS"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("MAT"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("BIO"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("CHE"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("PHY"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("GEO"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("HIS"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("CRE"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("AGR"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("BST"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase(" TOTAL"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("  MEAN"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("POSITION"));
                                //cell.setRowspan(2);
                                table.addCell(cell);


                               float[] columnWidths = new float[] {5f, 30f, 6f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 8f, 8f, 10f};
                             table.setPaddingTop(TOP_ALIGNMENT);

                              table.setWidths(columnWidths);

                              try{
                                  DbConnection connect = new DbConnection();
                                  conn = connect.Connectdb();
                                            String getCat_thee = "SELECT adm, name,form, name, kcpe,eng, kis, mat,bio,che,phy,geo,his,cre,agr,bst,yearr, total, meanmark, term, kcpe, FIND_IN_SET( meanmark, (SELECT GROUP_CONCAT( meanmark ORDER BY meanmark DESC ) FROM cat_three WHERE form = '"+combo_form.getSelectedItem()+"' AND term = '"+combo_term.getSelectedItem()+"' AND yearr = '"+combo_year.getSelectedItem()+"')) AS rank FROM cat_three WHERE form = '"+combo_form.getSelectedItem()+"' AND term = '"+combo_term.getSelectedItem()+"' AND yearr = '"+combo_year.getSelectedItem()+"' ORDER BY meanmark desc";
                                            stm = conn.createStatement();
                                            rs = stm.executeQuery(getCat_thee);

                                            while(rs.next())
                                            {
                                                String adm = rs.getString("adm");
                                                String name = rs.getString("name");
                                                String kcpe = rs.getString("kcpe");
                                                String mat = rs.getString("mat");
                                                String eng = rs.getString("eng");
                                                String kis = rs.getString("kis");
                                                String bio = rs.getString("bio");
                                                String che = rs.getString("che");
                                                String phy = rs.getString("phy");
                                                String his = rs.getString("his");
                                                String geo = rs.getString("geo");
                                                String cre = rs.getString("cre");
                                                String agr = rs.getString("agr");
                                                String bst = rs.getString("bst");
                                                String tot = rs.getString("total");
                                                String mm = rs.getString("meanmark");
                                                String ran = rs.getString("rank");

                                                //set to pdf
                                                table.addCell(adm);
                                                table.addCell(name);
                                                table.addCell(kcpe);
                                                table.addCell(eng);
                                                table.addCell(kis);
                                                table.addCell(mat);
                                                table.addCell(bio);
                                                table.addCell(che);
                                                table.addCell(phy);
                                                table.addCell(geo);
                                                table.addCell(his);
                                                table.addCell(cre);
                                                table.addCell(agr);
                                                table.addCell(bst);
                                                table.addCell("   "+tot);
                                                table.addCell("    "+mm);
                                                table.addCell("       "+ran);

                                            }
                              }catch(Exception e)
                              {
                               e.printStackTrace();
                              }
                              document.add(table);
                              document.close();

                              JOptionPane.showMessageDialog(null, "Exam marklist generated succesfully. You can view it in PDF format in the documents folder.");


                            }catch(Exception e)
                            {
                               // e.printStackTrace();
                                JOptionPane.showMessageDialog( this, "The marklist has already been generated","Error", JOptionPane.ERROR_MESSAGE);

                            }
                        }else if(combo_exam.getSelectedItem().equals("AVERAGE"))
                        {

                        try{
                              Document document = new Document(PageSize.A4.rotate());  
                              FileOutputStream file =  new FileOutputStream(path+id+"EXAM AVERAGE marklist.pdf");
                              PdfWriter.getInstance(document, file);

                              document.open();
                              document.add(new Paragraph("                                           UNYOLO MIXED SECONDARY SCHOOL", FontFactory.getFont(FontFactory.TIMES_BOLD, 20, Font.BOLD, BaseColor.BLACK)));
                              document.add(new Paragraph("                                                                                             P.O BOX 31-40620, BORO", FontFactory.getFont(FontFactory.TIMES_BOLD, 14, Font.BOLD, BaseColor.BLACK)));
                              document.add(new Paragraph("\n"));
                              document.add(new Paragraph("                                                               FORM "+combo_form.getSelectedItem()+" EXAM MARK LIST FOR "+tm+" AVERAGE EXAMS "+yr, FontFactory.getFont(FontFactory.TIMES_BOLD, 13, Font.BOLD, BaseColor.BLACK)));
                              document.add(new Paragraph("\n"));
                              PdfPTable table = new PdfPTable(17);
                              table.setWidthPercentage(100);

                              PdfPCell cell;
                        // we add a cell with colspan 3
                                cell = new PdfPCell(new Phrase("ADM"));
                               // cell.setColspan(3);
                             //   cell.setPadding(4);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("NAME"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("KCPE"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("ENG"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("KIS"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("MAT"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("BIO"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("CHE"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("PHY"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("GEO"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("HIS"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("CRE"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("AGR"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("BST"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase(" TOTAL"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("  MEAN"));
                                //cell.setRowspan(2);
                                table.addCell(cell);

                                cell = new PdfPCell(new Phrase("POSITION"));
                                //cell.setRowspan(2);
                                table.addCell(cell);


                              float[] columnWidths = new float[] {5f, 30f, 6f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 8f, 8f, 10f};
                              table.setPaddingTop(TOP_ALIGNMENT);

                              table.setWidths(columnWidths);

                              try{
                                  DbConnection connect = new DbConnection();
                                  conn = connect.Connectdb();
                                            String getCat_avg = "SELECT adm, name,form, name, kcpe,eng, kis, mat,bio,che,phy,geo,his,cre,agr,bst,yearr, total, meanmark, term, kcpe, FIND_IN_SET( meanmark, (SELECT GROUP_CONCAT( meanmark ORDER BY meanmark DESC ) FROM cat_avg WHERE form = '"+combo_form.getSelectedItem()+"' AND term = '"+combo_term.getSelectedItem()+"' AND yearr = '"+combo_year.getSelectedItem()+"')) AS rank FROM cat_avg WHERE form = '"+combo_form.getSelectedItem()+"' AND term = '"+combo_term.getSelectedItem()+"' AND yearr = '"+combo_year.getSelectedItem()+"' ORDER BY meanmark desc";
                                            stm = conn.createStatement();
                                            rs = stm.executeQuery(getCat_avg);

                                            while(rs.next())
                                            {
                                                String adm = rs.getString("adm");
                                                String name = rs.getString("name");
                                                String kcpe = rs.getString("kcpe");
                                                String mat = rs.getString("mat");
                                                String eng = rs.getString("eng");
                                                String kis = rs.getString("kis");
                                                String bio = rs.getString("bio");
                                                String che = rs.getString("che");
                                                String phy = rs.getString("phy");
                                                String his = rs.getString("his");
                                                String geo = rs.getString("geo");
                                                String cre = rs.getString("cre");
                                                String agr = rs.getString("agr");
                                                String bst = rs.getString("bst");
                                                String tot = rs.getString("total");
                                                String mm = rs.getString("meanmark");
                                                String ran = rs.getString("rank");

                                                //set to pdf
                                                table.addCell(adm);
                                                table.addCell(name);
                                                table.addCell(kcpe);
                                                table.addCell(eng);
                                                table.addCell(kis);
                                                table.addCell(mat);
                                                table.addCell(bio);
                                                table.addCell(che);
                                                table.addCell(phy);
                                                table.addCell(geo);
                                                table.addCell(his);
                                                table.addCell(cre);
                                                table.addCell(agr);
                                                table.addCell(bst);
                                                table.addCell("   "+tot);
                                                table.addCell("    "+mm);
                                                table.addCell("       "+ran);

                                            }
                              }catch(Exception e)
                              {
                               e.printStackTrace();
                              }
                              document.add(table);
                              document.close();

                                JOptionPane.showMessageDialog(null, "Exam marklist generated succesfully. You can view it in PDF format in the documents folder.");

                            }catch(Exception e)
                            {
                               // e.printStackTrace();
                                JOptionPane.showMessageDialog( this, "The marklist has already been generated","Error", JOptionPane.ERROR_MESSAGE);

                            }
                        }else{
                        JOptionPane.showMessageDialog( this, "Kindly check your exam selection.","Error", JOptionPane.ERROR_MESSAGE);

                    }  
                }else{
                    JOptionPane.showMessageDialog( this, "Kindly check your form selection.","Error", JOptionPane.ERROR_MESSAGE);
                }
            }else{
                 JOptionPane.showMessageDialog( this, "Kindly check your term selection.","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }else{
            JOptionPane.showMessageDialog( this, "Kindly check your year selection.","Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void combo_yearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_yearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_yearActionPerformed

    private void combo_termActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_termActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_termActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClassExamView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClassExamView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClassExamView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClassExamView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ClassExamView dialog = new ClassExamView(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox combo_exam;
    private javax.swing.JComboBox combo_form;
    private javax.swing.JComboBox combo_term;
    private javax.swing.JComboBox combo_year;
    private javax.swing.JButton jButton1;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable student_exam;
    // End of variables declaration//GEN-END:variables
String table ="exam2";
}
