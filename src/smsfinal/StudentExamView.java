/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package smsfinal;

import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.event.KeyEvent;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import org.apache.pdfbox.util.PDFMergerUtility;

/**
 *
 * @author Derrick Witness
 */
public class StudentExamView extends javax.swing.JDialog {

    DisplayTrayIcon DTI = new DisplayTrayIcon();
    Connection conn = null;
    Statement stm = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    /**
     * Creates new form StudentExamView
     */
    public StudentExamView(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        iconMethod();
        //loader.setVisible(false);
        SimpleDateFormat D = new SimpleDateFormat("yyyy");
        Date  dat = new Date();
        String siku = D.format(dat);
        year.addItem("--Select Year--");
        int index = 1;
        for (int i = Integer.parseInt(siku); i > 2014; i--)
        {
           year.addItem(String.valueOf(i));
          index++;
        }
        JFileChooser fr = new JFileChooser();
        FileSystemView fw = fr.getFileSystemView();
        String path = fw.getDefaultDirectory() + "/Unyolo/Student Report Cards";
        File file = new File(path);
        if (!file.exists()) {
            if (file.mkdir()) {
                System.out.println("Directory is created!");
            } else {
                System.out.println("Failed to create directory!");
            }
        }
    }

    public void iconMethod() {
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("students.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel26 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel44 = new javax.swing.JLabel();
        average = new javax.swing.JTextField();
        grade = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        total = new javax.swing.JTextField();
        ranking = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        combo_form = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        adm_No = new javax.swing.JTextField();
        term = new javax.swing.JComboBox();
        combo_exam = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        student_name = new javax.swing.JTextField();
        year = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        Marks_mat = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        Marks_eng = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        Marks_kisw = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        Grade_math = new javax.swing.JTextField();
        Grade_eng = new javax.swing.JTextField();
        Grade_kisw = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        Marks_history = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        Marks_geography = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        Marks_CRE = new javax.swing.JTextField();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        Grade_History = new javax.swing.JTextField();
        Grade_Geog = new javax.swing.JTextField();
        Grade_CRE = new javax.swing.JTextField();
        jPanel23 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jLabel52 = new javax.swing.JLabel();
        Marks_Agric = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        Marks_Bus = new javax.swing.JTextField();
        Grade_Agric = new javax.swing.JTextField();
        jLabel58 = new javax.swing.JLabel();
        Grade_Bst = new javax.swing.JTextField();
        jLabel59 = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        Marks_Biology = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        Marks_Chem = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        Marks_Physics = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        Grade_Bio = new javax.swing.JTextField();
        Grade_Chem = new javax.swing.JTextField();
        Grade_Phy = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        promote = new javax.swing.JButton();
        demote = new javax.swing.JButton();
        loader = new javax.swing.JLabel();
        class_reports = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel26.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel44.setText("Mean:");

        average.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                averageKeyTyped(evt);
            }
        });

        grade.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                gradeKeyTyped(evt);
            }
        });

        jLabel45.setText("Grade:");

        jLabel46.setText("Total Marks:");

        total.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                totalKeyTyped(evt);
            }
        });

        ranking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rankingActionPerformed(evt);
            }
        });
        ranking.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                rankingKeyTyped(evt);
            }
        });

        jLabel15.setText("Class Position:");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel46)
                            .addComponent(jLabel45, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel44, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(grade)
                            .addComponent(average)
                            .addComponent(total)))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ranking, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)))
                .addGap(28, 28, 28))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel46))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel44)
                    .addComponent(average, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel45)
                    .addComponent(grade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(ranking, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Search"));

        jLabel1.setText("Admission No:");

        jLabel3.setText("Form:");

        combo_form.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select Form--", "1", "2", "3", "4" }));

        jLabel4.setText("Exam:");

        jLabel2.setText("Term:");

        adm_No.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                adm_NoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                adm_NoKeyTyped(evt);
            }
        });

        term.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select Term--", "1", "2", "3" }));
        term.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                termActionPerformed(evt);
            }
        });

        combo_exam.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select Exam", "CAT 1", "CAT 2", "END TERM", "AVERAGE" }));
        combo_exam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_examActionPerformed(evt);
            }
        });

        jLabel5.setText("Name:");

        student_name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                student_nameKeyTyped(evt);
            }
        });

        year.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearActionPerformed(evt);
            }
        });

        jLabel6.setText("Year:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(combo_exam, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(combo_form, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(adm_No)
                    .addComponent(student_name)
                    .addComponent(term, 0, 226, Short.MAX_VALUE)
                    .addComponent(year, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(adm_No, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_form, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(student_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(term, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_exam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Compulsory "));

        jLabel8.setText("Math:");

        Marks_mat.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Marks_mat.setToolTipText("BIOLOGY");
        Marks_mat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Marks_matKeyTyped(evt);
            }
        });

        jLabel9.setText("English:");

        Marks_eng.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Marks_eng.setToolTipText("CHEMISTRY");
        Marks_eng.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Marks_engKeyTyped(evt);
            }
        });

        jLabel10.setText("Kiswahili:");

        Marks_kisw.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Marks_kisw.setToolTipText("PHYSICS");
        Marks_kisw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Marks_kiswActionPerformed(evt);
            }
        });
        Marks_kisw.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Marks_kiswKeyTyped(evt);
            }
        });

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Grade");

        Grade_math.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Grade_math.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Grade_mathKeyTyped(evt);
            }
        });

        Grade_eng.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Grade_eng.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Grade_engKeyTyped(evt);
            }
        });

        Grade_kisw.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Grade_kisw.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Grade_kiswKeyTyped(evt);
            }
        });

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("Marks");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(Marks_eng, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Grade_eng, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(Marks_kisw, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Grade_kisw, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(Marks_mat, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Grade_math, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(Marks_mat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Grade_math, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(Marks_eng, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Grade_eng, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(Marks_kisw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Grade_kisw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(jLabel21))
                        .addGap(81, 81, 81)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel21.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder("Humanities"));

        jLabel37.setText("History:");

        Marks_history.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Marks_history.setToolTipText("HISTORY");
        Marks_history.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Marks_historyKeyTyped(evt);
            }
        });

        jLabel38.setText("Geography:");

        Marks_geography.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Marks_geography.setToolTipText("GEOGRAPHY");
        Marks_geography.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Marks_geographyKeyTyped(evt);
            }
        });

        jLabel39.setText("CRE:");

        Marks_CRE.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Marks_CRE.setToolTipText("RELIGIOUS STUDIES");
        Marks_CRE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Marks_CREKeyTyped(evt);
            }
        });

        jLabel50.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel50.setText("Marks");

        jLabel51.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel51.setText("Grade");

        Grade_History.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Grade_History.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Grade_HistoryKeyTyped(evt);
            }
        });

        Grade_Geog.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Grade_Geog.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Grade_GeogKeyTyped(evt);
            }
        });

        Grade_CRE.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Grade_CRE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Grade_CREKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel37)
                    .addComponent(jLabel39)
                    .addComponent(jLabel38))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(Marks_CRE, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Marks_geography, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Marks_history, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel50, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Grade_History)
                    .addComponent(Grade_Geog)
                    .addComponent(Grade_CRE)
                    .addComponent(jLabel51, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel20Layout.createSequentialGroup()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel50)
                    .addComponent(jLabel51))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(Marks_history, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Grade_History, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Marks_geography, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel38)
                    .addComponent(Grade_Geog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39)
                    .addComponent(Marks_CRE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Grade_CRE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel23.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel22.setBorder(javax.swing.BorderFactory.createTitledBorder("Optional"));

        jLabel52.setText("Agriculture:");

        Marks_Agric.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Marks_Agric.setToolTipText("AGRICULTURE");
        Marks_Agric.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Marks_AgricKeyTyped(evt);
            }
        });

        jLabel53.setText("Business St:");

        Marks_Bus.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Marks_Bus.setToolTipText("COMMERCE");
        Marks_Bus.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Marks_BusKeyTyped(evt);
            }
        });

        Grade_Agric.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Grade_Agric.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Grade_AgricKeyTyped(evt);
            }
        });

        jLabel58.setText("Grade");

        Grade_Bst.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Grade_Bst.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Grade_BstKeyTyped(evt);
            }
        });

        jLabel59.setText("Marks");

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel22Layout.createSequentialGroup()
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel52)
                            .addComponent(jLabel53))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(Marks_Bus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                            .addComponent(Marks_Agric, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addComponent(jLabel59))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel58)
                        .addComponent(Grade_Bst, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Grade_Agric, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel22Layout.createSequentialGroup()
                            .addComponent(Grade_Agric, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(Grade_Bst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel22Layout.createSequentialGroup()
                            .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel58)
                                .addComponent(jLabel59))
                            .addGap(55, 55, 55)))
                    .addGroup(jPanel22Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel52)
                            .addComponent(Marks_Agric, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel53)
                            .addComponent(Marks_Bus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel22, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel14.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Sciences"));

        jLabel11.setText("Biology:");

        Marks_Biology.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Marks_Biology.setToolTipText("BIOLOGY");
        Marks_Biology.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Marks_BiologyKeyTyped(evt);
            }
        });

        jLabel12.setText("Chemistry:");

        Marks_Chem.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Marks_Chem.setToolTipText("CHEMISTRY");
        Marks_Chem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Marks_ChemKeyTyped(evt);
            }
        });

        jLabel13.setText("Physics:");

        Marks_Physics.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Marks_Physics.setToolTipText("PHYSICS");
        Marks_Physics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Marks_PhysicsActionPerformed(evt);
            }
        });
        Marks_Physics.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Marks_PhysicsKeyTyped(evt);
            }
        });

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("Grade");

        Grade_Bio.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Grade_Bio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Grade_BioKeyTyped(evt);
            }
        });

        Grade_Chem.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Grade_Chem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Grade_ChemKeyTyped(evt);
            }
        });

        Grade_Phy.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Grade_Phy.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Grade_PhyKeyTyped(evt);
            }
        });

        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("Marks");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel11)
                        .addGap(14, 14, 14)
                        .addComponent(Marks_Biology, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Marks_Chem, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                            .addComponent(Marks_Physics))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Grade_Bio, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Grade_Chem, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Grade_Phy, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(Marks_Biology, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Grade_Bio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(Marks_Chem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Grade_Chem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(Marks_Physics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Grade_Phy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(jLabel22))
                        .addGap(81, 81, 81)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel26Layout = new javax.swing.GroupLayout(jPanel26);
        jPanel26.setLayout(jPanel26Layout);
        jPanel26Layout.setHorizontalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel26Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel26Layout.createSequentialGroup()
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(82, 82, 82))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel26Layout.createSequentialGroup()
                        .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel26Layout.setVerticalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel26Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel26Layout.createSequentialGroup()
                        .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel26Layout.createSequentialGroup()
                        .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel26Layout.createSequentialGroup()
                                .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 8, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel26, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel26, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        promote.setText("PROMOTE");
        promote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                promoteActionPerformed(evt);
            }
        });

        demote.setText("DEMOTE");
        demote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                demoteActionPerformed(evt);
            }
        });

        loader.setIcon(new javax.swing.ImageIcon(getClass().getResource("/attatchments/loader.gif"))); // NOI18N

        class_reports.setIcon(new javax.swing.ImageIcon(getClass().getResource("/attatchments/bar-code_48x48.png"))); // NOI18N
        class_reports.setText("GENERATE  REPORT CARDS");
        class_reports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                class_reportsActionPerformed(evt);
            }
        });

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/attatchments/cancel-icon.png"))); // NOI18N
        jLabel7.setToolTipText("Clear all fields");
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(loader, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(class_reports)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(promote, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(demote, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loader)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(demote, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(promote, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(class_reports, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void averageKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_averageKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_averageKeyTyped

    private void gradeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_gradeKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_gradeKeyTyped

    private void totalKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_totalKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_totalKeyTyped

    private void adm_NoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_adm_NoKeyReleased
        DbConnection Conect = new DbConnection();
        conn = Conect.Connectdb();
        if (year.getSelectedItem().equals("--Select Year--")) {
               JOptionPane.showMessageDialog(this, "Kindly check your year selection","Error", JOptionPane.ERROR_MESSAGE);
        return;
        }
       
        try {
            String GetDetails = "SELECT  UPPER(`Name`), `form`, `stream` FROM `student_exam` WHERE `adm` = ?";
            pst = conn.prepareStatement(GetDetails);
            pst.setString(1, adm_No.getText());
            rs = pst.executeQuery();

            if (rs.next()) {
                String form = rs.getString("form");
                combo_form.setSelectedItem(form);
                String stream = rs.getString("stream");
                //  combo_Stream.setSelectedItem(stream);
                String name = rs.getString("UPPER(`Name`)");
                student_name.setText(name);

            }

        } catch (Exception e) {

        }
    }//GEN-LAST:event_adm_NoKeyReleased

    private void adm_NoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_adm_NoKeyTyped
        char c = evt.getKeyChar();

        if (!(Character.isDigit(c) || c == KeyEvent.VK_DELETE) || c == KeyEvent.VK_BACK_SPACE) {

            evt.consume();
        }
    }//GEN-LAST:event_adm_NoKeyTyped

    private void termActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_termActionPerformed

    }//GEN-LAST:event_termActionPerformed

    private void combo_examActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_examActionPerformed
        DbConnection Connect = new DbConnection();
        conn = Connect.Connectdb();
        if (!combo_exam.getSelectedItem().equals("AVERAGE")) {
            class_reports.setEnabled(false);
        } else if (combo_exam.getSelectedItem().equals("AVERAGE")) {
            class_reports.setEnabled(true);
        }

        if (!term.getSelectedItem().equals("--Select Term--") && !year.getSelectedItem().equals("--Select Year--")) {
            String tm = (String) term.getSelectedItem();
            String yr = (String) year.getSelectedItem();
            String form = (String) combo_form.getSelectedItem();
            if (combo_exam.getSelectedItem().equals("CAT 1")) {
                try {

                    String getCat_one = "SELECT * FROM `cat_one` WHERE `adm` = '" + adm_No.getText() + "' AND `term` = '" + tm + "' AND `yearr` = '" + yr + "' AND form = '"+form+"'";
                    stm = conn.createStatement();
                    rs = stm.executeQuery(getCat_one);

                    while (rs.next()) {
                        Marks_mat.setText(rs.getString("mat"));
                        Marks_eng.setText(rs.getString("eng"));
                        Marks_kisw.setText(rs.getString("kis"));
                        Marks_Biology.setText(rs.getString("bio"));
                        Marks_Chem.setText(rs.getString("che"));

                        Grade_math.setText(rs.getString("matgrd"));
                        Grade_eng.setText(rs.getString("enggrd"));
                        Grade_kisw.setText(rs.getString("kisgrd"));
                        Grade_Bio.setText(rs.getString("biogrd"));
                        Grade_Chem.setText(rs.getString("chegrd"));
                        //getUncompared values
                        String phy = rs.getString("phy");
                        String phygrd = rs.getString("phygrd");
                        //his
                        String his = rs.getString("his");
                        String hisgrd = rs.getString("hisgrd");
                        //geo
                        String geo = rs.getString("geo");
                        String geogrd = rs.getString("geogrd");
                        //cre
                        String cre = rs.getString("cre");
                        String cregrd = rs.getString("cregrd");
                        //agr
                        String agr = rs.getString("agr");
                        String agrgrd = rs.getString("agrgrd");
                        //bst
                        String bst = rs.getString("bst");
                        String bstgrd = rs.getString("bstgrd");

                        try {

                            String sqlSetview = "SELECT `phy`, `geo`, `his`, `cre`, `agr`, `bus` FROM `student_exam` WHERE `adm` ='" + adm_No.getText() + "' ";
                            stm = conn.createStatement();
                            rs = stm.executeQuery(sqlSetview);

                            while (rs.next()) {
                                String physics = rs.getString("phy");
                                if (physics.equals("-")) {
                                    Marks_Physics.setText("");
                                    Grade_Phy.setText("");
                                } else {
                                    Marks_Physics.setText(phy);
                                    Grade_Phy.setText(phygrd);
                                }
                                String geography = rs.getString("geo");
                                if (geography.equals("-")) {
                                    Marks_geography.setText("");
                                    Grade_Geog.setText("");
                                } else {
                                    Marks_geography.setText(geo);
                                    Grade_Geog.setText(geogrd);
                                }
                                String history = rs.getString("his");
                                if (history.equals("-")) {
                                    Marks_history.setText("");
                                    Grade_History.setText("");
                                } else {
                                    Marks_history.setText(his);
                                    Grade_History.setText(hisgrd);
                                }
                                String CRE = rs.getString("cre");
                                if (CRE.equals("-")) {
                                    Marks_CRE.setText("");
                                    Grade_CRE.setText("");
                                } else {
                                    Marks_CRE.setText(cre);
                                    Grade_CRE.setText(cregrd);
                                }

                                String agriculture = rs.getString("agr");
                                if (agriculture.equals("-")) {
                                    Marks_Agric.setText("");
                                    Grade_Agric.setText("");
                                } else {
                                    Marks_Agric.setText(agr);
                                    Grade_Agric.setText(agrgrd);
                                }
                                String business = rs.getString("bus");
                                if (business.equals("-")) {
                                    Marks_Bus.setText("");
                                    Grade_Bst.setText("");
                                } else {
                                    Marks_Bus.setText(bst);
                                    Grade_Bst.setText(bstgrd);
                                }
                                try {
                                    String sqlGetRank = "SELECT adm,meanmark,total,meangrd, FIND_IN_SET( meanmark, (SELECT GROUP_CONCAT( meanmark ORDER BY meanmark DESC ) FROM cat_one WHERE form = '"+combo_form.getSelectedItem()+"' AND yearr = '"+year.getSelectedItem()+"' AND term = '"+term.getSelectedItem()+"' )) AS rank FROM cat_one WHERE form = '"+combo_form.getSelectedItem()+"' AND yearr = '"+year.getSelectedItem()+"' AND term = '"+term.getSelectedItem()+"' AND adm = '"+adm_No.getText()+"' ORDER BY meanmark DESC";
                                    stm = conn.createStatement();
                                    rs = stm.executeQuery(sqlGetRank);
                                    while (rs.next()) {
                                        ranking.setText(rs.getString("rank"));
                                        total.setText(rs.getString("total"));
                                        average.setText(rs.getString("meanmark"));
                                        grade.setText(rs.getString("meangrd"));
                                    }

                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                    }
                } catch (Exception e) {
                    e.printStackTrace();

                }

            } else if (combo_exam.getSelectedItem().equals("CAT 2")) {

                try {

                    String getCat_one = "SELECT * FROM `cat_two` WHERE `adm` = '" + adm_No.getText() + "' AND `term` = '" + tm + "' AND `yearr` = '" + yr + "' AND form = '"+form+"'";
                    stm = conn.createStatement();
                    rs = stm.executeQuery(getCat_one);

                    while (rs.next()) {
                        Marks_mat.setText(rs.getString("mat"));
                        Marks_eng.setText(rs.getString("eng"));
                        Marks_kisw.setText(rs.getString("kis"));
                        Marks_Biology.setText(rs.getString("bio"));
                        Marks_Chem.setText(rs.getString("che"));

                        Grade_math.setText(rs.getString("matgrd"));
                        Grade_eng.setText(rs.getString("enggrd"));
                        Grade_kisw.setText(rs.getString("kisgrd"));
                        Grade_Bio.setText(rs.getString("biogrd"));
                        Grade_Chem.setText(rs.getString("chegrd"));
                        //getUncompared values
                        String phy = rs.getString("phy");
                        String phygrd = rs.getString("phygrd");
                        //his
                        String his = rs.getString("his");
                        String hisgrd = rs.getString("hisgrd");
                        //geo
                        String geo = rs.getString("geo");
                        String geogrd = rs.getString("geogrd");
                        //cre
                        String cre = rs.getString("cre");
                        String cregrd = rs.getString("cregrd");
                        //agr
                        String agr = rs.getString("agr");
                        String agrgrd = rs.getString("agrgrd");
                        //bst
                        String bst = rs.getString("bst");
                        String bstgrd = rs.getString("bstgrd");

                        try {

                            String sqlSetview = "SELECT `phy`, `geo`, `his`, `cre`, `agr`, `bus` FROM `student_exam` WHERE `adm` ='" + adm_No.getText() + "' ";
                            stm = conn.createStatement();
                            rs = stm.executeQuery(sqlSetview);

                            while (rs.next()) {
                                String physics = rs.getString("phy");
                                if (physics.equals("-")) {
                                    Marks_Physics.setText("");
                                    Grade_Phy.setText("");
                                } else {
                                    Marks_Physics.setText(phy);
                                    Grade_Phy.setText(phygrd);
                                }
                                String geography = rs.getString("geo");
                                if (geography.equals("-")) {
                                    Marks_geography.setText("");
                                    Grade_Geog.setText("");
                                } else {
                                    Marks_geography.setText(geo);
                                    Grade_Geog.setText(geogrd);
                                }
                                String history = rs.getString("his");
                                if (history.equals("-")) {
                                    Marks_history.setText("");
                                    Grade_History.setText("");
                                } else {
                                    Marks_history.setText(his);
                                    Grade_History.setText(hisgrd);
                                }
                                String CRE = rs.getString("cre");
                                if (CRE.equals("-")) {
                                    Marks_CRE.setText("");
                                    Grade_CRE.setText("");
                                } else {
                                    Marks_CRE.setText(cre);
                                    Grade_CRE.setText(cregrd);
                                }

                                String agriculture = rs.getString("agr");
                                if (agriculture.equals("-")) {
                                    Marks_Agric.setText("");
                                    Grade_Agric.setText("");
                                } else {
                                    Marks_Agric.setText(agr);
                                    Grade_Agric.setText(agrgrd);
                                }
                                String business = rs.getString("bus");
                                if (business.equals("-")) {
                                    Marks_Bus.setText("");
                                    Grade_Bst.setText("");
                                } else {
                                    Marks_Bus.setText(bst);
                                    Grade_Bst.setText(bstgrd);
                                }
                                try {
                                    String sqlGetRank = "SELECT adm,meanmark,total,meangrd, FIND_IN_SET( meanmark, (SELECT GROUP_CONCAT( meanmark ORDER BY meanmark DESC ) FROM cat_two WHERE form = '"+combo_form.getSelectedItem()+"' AND yearr = '"+year.getSelectedItem()+"' AND term = '"+term.getSelectedItem()+"' )) AS rank FROM cat_two WHERE form = '"+combo_form.getSelectedItem()+"' AND yearr = '"+year.getSelectedItem()+"' AND term = '"+term.getSelectedItem()+"' AND adm = '"+adm_No.getText()+"' ORDER BY meanmark DESC";
                                    stm = conn.createStatement();
                                    rs = stm.executeQuery(sqlGetRank);
                                    while (rs.next()) {
                                        ranking.setText(rs.getString("rank"));
                                        total.setText(rs.getString("total"));
                                        average.setText(rs.getString("meanmark"));
                                        grade.setText(rs.getString("meangrd"));
                                    }

                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                    }
                } catch (Exception e) {
                    e.printStackTrace();

                }finally {
                try { rs.close(); } catch (Exception e) { /* ignored */ }
                try { pst.close(); } catch (Exception e) { /* ignored */ }
                try { conn.close(); } catch (Exception e) { /* ignored */ }
            }

            } else if (combo_exam.getSelectedItem().equals("END TERM")) {
                try {

                    String getCat_one = "SELECT * FROM `cat_three` WHERE `adm` = '" + adm_No.getText() + "' AND `term` = '" + tm + "' AND `yearr` = '" + yr + "' AND form = '"+form+"'";
                    stm = conn.createStatement();
                    rs = stm.executeQuery(getCat_one);

                    while (rs.next()) {
                        Marks_mat.setText(rs.getString("mat"));
                        Marks_eng.setText(rs.getString("eng"));
                        Marks_kisw.setText(rs.getString("kis"));
                        Marks_Biology.setText(rs.getString("bio"));
                        Marks_Chem.setText(rs.getString("che"));

                        Grade_math.setText(rs.getString("matgrd"));
                        Grade_eng.setText(rs.getString("enggrd"));
                        Grade_kisw.setText(rs.getString("kisgrd"));
                        Grade_Bio.setText(rs.getString("biogrd"));
                        Grade_Chem.setText(rs.getString("chegrd"));
                        //getUncompared values
                        String phy = rs.getString("phy");
                        String phygrd = rs.getString("phygrd");
                        //his
                        String his = rs.getString("his");
                        String hisgrd = rs.getString("hisgrd");
                        //geo
                        String geo = rs.getString("geo");
                        String geogrd = rs.getString("geogrd");
                        //cre
                        String cre = rs.getString("cre");
                        String cregrd = rs.getString("cregrd");
                        //agr
                        String agr = rs.getString("agr");
                        String agrgrd = rs.getString("agrgrd");
                        //bst
                        String bst = rs.getString("bst");
                        String bstgrd = rs.getString("bstgrd");

                        try {

                            String sqlSetview = "SELECT `phy`, `geo`, `his`, `cre`, `agr`, `bus` FROM `student_exam` WHERE `adm` ='" + adm_No.getText() + "' ";
                            stm = conn.createStatement();
                            rs = stm.executeQuery(sqlSetview);

                            while (rs.next()) {
                                String physics = rs.getString("phy");
                                if (physics.equals("-")) {
                                    Marks_Physics.setText("");
                                    Grade_Phy.setText("");
                                } else {
                                    Marks_Physics.setText(phy);
                                    Grade_Phy.setText(phygrd);
                                }
                                String geography = rs.getString("geo");
                                if (geography.equals("-")) {
                                    Marks_geography.setText("");
                                    Grade_Geog.setText("");
                                } else {
                                    Marks_geography.setText(geo);
                                    Grade_Geog.setText(geogrd);
                                }
                                String history = rs.getString("his");
                                if (history.equals("-")) {
                                    Marks_history.setText("");
                                    Grade_History.setText("");
                                } else {
                                    Marks_history.setText(his);
                                    Grade_History.setText(hisgrd);
                                }
                                String CRE = rs.getString("cre");
                                if (CRE.equals("-")) {
                                    Marks_CRE.setText("");
                                    Grade_CRE.setText("");
                                } else {
                                    Marks_CRE.setText(cre);
                                    Grade_CRE.setText(cregrd);
                                }

                                String agriculture = rs.getString("agr");
                                if (agriculture.equals("-")) {
                                    Marks_Agric.setText("");
                                    Grade_Agric.setText("");
                                } else {
                                    Marks_Agric.setText(agr);
                                    Grade_Agric.setText(agrgrd);
                                }
                                String business = rs.getString("bus");
                                if (business.equals("-")) {
                                    Marks_Bus.setText("");
                                    Grade_Bst.setText("");
                                } else {
                                    Marks_Bus.setText(bst);
                                    Grade_Bst.setText(bstgrd);
                                }
                                try {
                                    String sqlGetRank = "SELECT adm,meanmark,total,meangrd, FIND_IN_SET( meanmark, (SELECT GROUP_CONCAT( meanmark ORDER BY meanmark DESC ) FROM cat_three WHERE form = '"+combo_form.getSelectedItem()+"' AND yearr = '"+year.getSelectedItem()+"' AND term = '"+term.getSelectedItem()+"' )) AS rank FROM cat_three WHERE form = '"+combo_form.getSelectedItem()+"' AND yearr = '"+year.getSelectedItem()+"' AND term = '"+term.getSelectedItem()+"' AND adm = '"+adm_No.getText()+"' ORDER BY meanmark DESC";
                                    stm = conn.createStatement();
                                    rs = stm.executeQuery(sqlGetRank);
                                    while (rs.next()) {
                                        ranking.setText(rs.getString("rank"));
                                        total.setText(rs.getString("total"));
                                        average.setText(rs.getString("meanmark"));
                                        grade.setText(rs.getString("meangrd"));
                                    }

                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                    }
                } catch (Exception e) {
                    e.printStackTrace();

                }finally {
                try { rs.close(); } catch (Exception e) { /* ignored */ }
                try { pst.close(); } catch (Exception e) { /* ignored */ }
                try { conn.close(); } catch (Exception e) { /* ignored */ }
            }

            } else if (combo_exam.getSelectedItem().equals("AVERAGE")) {
                updateExam ui = new updateExam();
                ui.updateMarks( adm_No.getText(), yr, tm,  form);
                try {

                    String getCat_one = "SELECT * FROM `cat_avg` WHERE `adm` = '" + adm_No.getText() + "' AND `term` = '" + tm + "' AND `yearr` = '" + yr + "' AND form = '"+form+"'";
                    stm = conn.createStatement();
                    rs = stm.executeQuery(getCat_one);

                    while (rs.next()) {
                        Marks_mat.setText(rs.getString("mat"));
                        Marks_eng.setText(rs.getString("eng"));
                        Marks_kisw.setText(rs.getString("kis"));
                        Marks_Biology.setText(rs.getString("bio"));
                        Marks_Chem.setText(rs.getString("che"));

                        Grade_math.setText(rs.getString("matgrd"));
                        Grade_eng.setText(rs.getString("enggrd"));
                        Grade_kisw.setText(rs.getString("kisgrd"));
                        Grade_Bio.setText(rs.getString("biogrd"));
                        Grade_Chem.setText(rs.getString("chegrd"));
                        //getUncompared values
                        String phy = rs.getString("phy");
                        String phygrd = rs.getString("phygrd");
                        //his
                        String his = rs.getString("his");
                        String hisgrd = rs.getString("hisgrd");
                        //geo
                        String geo = rs.getString("geo");
                        String geogrd = rs.getString("geogrd");
                        //cre
                        String cre = rs.getString("cre");
                        String cregrd = rs.getString("cregrd");
                        //agr
                        String agr = rs.getString("agr");
                        String agrgrd = rs.getString("agrgrd");
                        //bst
                        String bst = rs.getString("bst");
                        String bstgrd = rs.getString("bstgrd");
                        total.setText(rs.getString("total"));
                        try {

                            String sqlSetview = "SELECT `phy`, `geo`, `his`, `cre`, `agr`, `bus` FROM `student_exam` WHERE `adm` ='" + adm_No.getText() + "' ";
                            stm = conn.createStatement();
                            rs = stm.executeQuery(sqlSetview);

                            while (rs.next()) {
                                String physics = rs.getString("phy");
                                if (physics.equals("-")) {
                                    Marks_Physics.setText("");
                                    Grade_Phy.setText("");
                                } else {
                                    Marks_Physics.setText(phy);
                                    Grade_Phy.setText(phygrd);
                                }
                                String geography = rs.getString("geo");
                                if (geography.equals("-")) {
                                    Marks_geography.setText("");
                                    Grade_Geog.setText("");
                                } else {
                                    Marks_geography.setText(geo);
                                    Grade_Geog.setText(geogrd);
                                }
                                String history = rs.getString("his");
                                if (history.equals("-")) {
                                    Marks_history.setText("");
                                    Grade_History.setText("");
                                } else {
                                    Marks_history.setText(his);
                                    Grade_History.setText(hisgrd);
                                }
                                String CRE = rs.getString("cre");
                                if (CRE.equals("-")) {
                                    Marks_CRE.setText("");
                                    Grade_CRE.setText("");
                                } else {
                                    Marks_CRE.setText(cre);
                                    Grade_CRE.setText(cregrd);
                                }

                                String agriculture = rs.getString("agr");
                                if (agriculture.equals("-")) {
                                    Marks_Agric.setText("");
                                    Grade_Agric.setText("");
                                } else {
                                    Marks_Agric.setText(agr);
                                    Grade_Agric.setText(agrgrd);
                                }
                                String business = rs.getString("bus");
                                if (business.equals("-")) {
                                    Marks_Bus.setText("");
                                    Grade_Bst.setText("");
                                } else {
                                    Marks_Bus.setText(bst);
                                    Grade_Bst.setText(bstgrd);
                                }
                                try {
                                    String sqlGetRank = "SELECT adm,meanmark,total,meangrd, FIND_IN_SET( meanmark, (SELECT GROUP_CONCAT( meanmark ORDER BY meanmark DESC ) FROM cat_avg WHERE form = '"+combo_form.getSelectedItem()+"' AND yearr = '"+year.getSelectedItem()+"' AND term = '"+term.getSelectedItem()+"' )) AS rank FROM cat_avg WHERE form = '"+combo_form.getSelectedItem()+"' AND yearr = '"+year.getSelectedItem()+"' AND term = '"+term.getSelectedItem()+"' AND adm = '"+adm_No.getText()+"' ORDER BY meanmark DESC";
                                    stm = conn.createStatement();
                                    rs = stm.executeQuery(sqlGetRank);
                                    while (rs.next()) {
                                        ranking.setText(rs.getString("rank"));
                                        
                                        average.setText(rs.getString("meanmark"));
                                        grade.setText(rs.getString("meangrd"));
                                    }

                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                    }
                } catch (Exception e) {
                    e.printStackTrace();

                }

            }

        }
    }//GEN-LAST:event_combo_examActionPerformed

    private void Marks_matKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Marks_matKeyTyped
        char c = evt.getKeyChar();
        if ((Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        } else if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_Marks_matKeyTyped

    private void Marks_engKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Marks_engKeyTyped
        char c = evt.getKeyChar();
        if ((Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        } else if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_Marks_engKeyTyped

    private void Marks_kiswActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Marks_kiswActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Marks_kiswActionPerformed

    private void Marks_kiswKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Marks_kiswKeyTyped
        char c = evt.getKeyChar();
        if ((Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        } else if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_Marks_kiswKeyTyped

    private void Grade_mathKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Grade_mathKeyTyped
        char c = evt.getKeyChar();
        if ((Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        } else if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_Grade_mathKeyTyped

    private void Grade_engKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Grade_engKeyTyped
        char c = evt.getKeyChar();
        if ((Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        } else if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_Grade_engKeyTyped

    private void Grade_kiswKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Grade_kiswKeyTyped
        char c = evt.getKeyChar();
        if ((Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        } else if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_Grade_kiswKeyTyped

    private void Marks_historyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Marks_historyKeyTyped
        char c = evt.getKeyChar();
        if ((Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        } else if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_Marks_historyKeyTyped

    private void Marks_geographyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Marks_geographyKeyTyped
        char c = evt.getKeyChar();
        if ((Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        } else if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_Marks_geographyKeyTyped

    private void Marks_CREKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Marks_CREKeyTyped
        char c = evt.getKeyChar();
        if ((Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        } else if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_Marks_CREKeyTyped

    private void Grade_HistoryKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Grade_HistoryKeyTyped
        char c = evt.getKeyChar();
        if ((Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        } else if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_Grade_HistoryKeyTyped

    private void Grade_GeogKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Grade_GeogKeyTyped
        char c = evt.getKeyChar();
        if ((Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        } else if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_Grade_GeogKeyTyped

    private void Grade_CREKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Grade_CREKeyTyped
        char c = evt.getKeyChar();
        if ((Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        } else if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_Grade_CREKeyTyped

    private void Marks_AgricKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Marks_AgricKeyTyped
        char c = evt.getKeyChar();
        if ((Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        } else if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_Marks_AgricKeyTyped

    private void Marks_BusKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Marks_BusKeyTyped
        char c = evt.getKeyChar();
        if ((Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        } else if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_Marks_BusKeyTyped

    private void Grade_AgricKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Grade_AgricKeyTyped
        char c = evt.getKeyChar();
        if ((Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        } else if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_Grade_AgricKeyTyped

    private void Grade_BstKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Grade_BstKeyTyped
        char c = evt.getKeyChar();
        if ((Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        } else if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_Grade_BstKeyTyped

    private void Marks_BiologyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Marks_BiologyKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if ((Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        } else if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_Marks_BiologyKeyTyped

    private void Marks_ChemKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Marks_ChemKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if ((Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        } else if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_Marks_ChemKeyTyped

    private void Marks_PhysicsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Marks_PhysicsActionPerformed

    }//GEN-LAST:event_Marks_PhysicsActionPerformed

    private void Marks_PhysicsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Marks_PhysicsKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if ((Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        } else if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_Marks_PhysicsKeyTyped

    private void Grade_BioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Grade_BioKeyTyped
        char c = evt.getKeyChar();
        if ((Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        } else if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_Grade_BioKeyTyped

    private void Grade_ChemKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Grade_ChemKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if ((Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        } else if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_Grade_ChemKeyTyped

    private void Grade_PhyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Grade_PhyKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if ((Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        } else if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_Grade_PhyKeyTyped

    private void rankingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rankingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rankingActionPerformed

    private void yearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearActionPerformed
        //  clear();
    }//GEN-LAST:event_yearActionPerformed

    private void promoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_promoteActionPerformed
       if(!year.getSelectedItem().equals("--Select Year--"))
        {
            if(!term.getSelectedItem().equals("--Select Term--"))
            {
                if(!combo_form.getSelectedItem().equals("--Select Form--"))
                {
                    if(combo_exam.getSelectedItem().equals("AVERAGE"))
                    {
                        DbConnection Connect = new DbConnection();
                        conn = Connect.Connectdb();
                        int option = JOptionPane.showConfirmDialog(null, "Are you sure you want to generate this student to the next class?");
                        if (option == 0) 
                        {
                        try {
                            String promote = "SELECT `form` FROM `new_student`  WHERE `adm` = '" + adm_No.getText() + "'";
                            stm = conn.createStatement();
                            rs = stm.executeQuery(promote);
                            while (rs.next()) {
                                int count = rs.getInt("form");
                                int nf = count + 1;
                                if(nf == 2)
                                {
                                    try {
                                        String setForm = "UPDATE `new_student` SET `form`='" + nf + "'  WHERE `adm` = '" + adm_No.getText() + "'";
                                        pst = conn.prepareStatement(setForm);
                                        pst.execute();
                                            try{
                                                String setForm2 = "UPDATE `student_exam` SET `form`='" + nf + "', `phy`= '0' ,`geo`= '0' ,`his`= '0' ,`cre`= '0' ,`agr`= '0' ,`bus`= '0'   WHERE `adm` = '" + adm_No.getText() + "'";
                                                pst = conn.prepareStatement(setForm2);
                                                pst.execute();
                                            } catch (Exception e) {
                                                e.printStackTrace();
                                            }
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }finally {
                                    try { rs.close(); } catch (Exception e) { /* ignored */ }
                                    try { pst.close(); } catch (Exception e) { /* ignored */ }
                                    try { conn.close(); } catch (Exception e) { /* ignored */ }
                                }
                                }else if(nf == 3)
                                {
                                    try {
                                        String setForm = "UPDATE `new_student` SET `form`='" + nf + "'  WHERE `adm` = '" + adm_No.getText() + "'";
                                        pst = conn.prepareStatement(setForm);
                                        pst.execute();
                                            try{
                                                String setForm2 = "UPDATE `student_exam` SET `form`='" + nf + "', `phy`= '-' ,`geo`= '-' ,`his`= '-' ,`cre`= '-' ,`agr`= '-' ,`bus`= '-'   WHERE `adm` = '" + adm_No.getText() + "'";
                                                pst = conn.prepareStatement(setForm2);
                                                pst.execute();
                                                try{
                                                    String sdel = "DELETE FROM `subject_reg` WHERE adm = '"+adm_No.getText()+"'";
                                                    pst = conn.prepareStatement(sdel);
                                                    pst.execute();
                                                } catch (Exception e) {
                                                    e.printStackTrace();
                                                }
                                            } catch (Exception e) {
                                                e.printStackTrace();
                                            }
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }finally {
                                    try { rs.close(); } catch (Exception e) { /* ignored */ }
                                    try { pst.close(); } catch (Exception e) { /* ignored */ }
                                    try { conn.close(); } catch (Exception e) { /* ignored */ }
                                }
                                }else if(nf == 4)
                                {
                                    try {
                                        String setForm = "UPDATE `new_student` SET `form`='" + nf + "'  WHERE `adm` = '" + adm_No.getText() + "'";
                                        pst = conn.prepareStatement(setForm);
                                        pst.execute();
                                            try{
                                                String setForm2 = "UPDATE `student_exam` SET `form`='" + nf + "'  WHERE `adm` = '" + adm_No.getText() + "'";
                                                pst = conn.prepareStatement(setForm2);
                                                pst.execute();
                                            } catch (Exception e) {
                                                e.printStackTrace();
                                            }
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }finally {
                                    try { rs.close(); } catch (Exception e) { /* ignored */ }
                                    try { pst.close(); } catch (Exception e) { /* ignored */ }
                                    try { conn.close(); } catch (Exception e) { /* ignored */ }
                                }
                                }
                               

                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        JOptionPane.showMessageDialog( this, "Student has been promoted successfully.","Success", JOptionPane.PLAIN_MESSAGE);
                        
                      }
                    }else{
                        JOptionPane.showMessageDialog(this, "Kindly check your exam selection","Error", JOptionPane.ERROR_MESSAGE);
                    }
                }else{
                        JOptionPane.showMessageDialog(this, "Kindly check your form selection","Error", JOptionPane.ERROR_MESSAGE);
                    }
            }else{
                JOptionPane.showMessageDialog(this, "Kindly check your term selection","Error", JOptionPane.ERROR_MESSAGE);
            }
            
        }else{
            JOptionPane.showMessageDialog(this, "Kindly check your year selection","Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_promoteActionPerformed

    private void demoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_demoteActionPerformed
         if(!year.getSelectedItem().equals("--Select Year--"))
        {
            if(!term.getSelectedItem().equals("--Select Term--"))
            {
                if(!combo_form.getSelectedItem().equals("--Select Form--"))
                {
                    if(combo_exam.getSelectedItem().equals("AVERAGE"))
                    {
                        DbConnection Connect = new DbConnection();
                        conn = Connect.Connectdb();
                        int option = JOptionPane.showConfirmDialog(null, "Are you sure you want to demote this student to the previous class?");
                        if (option == 0) 
                        {
                        try {
                            String promote = "SELECT `form` FROM `new_student`  WHERE `adm` = '" + adm_No.getText() + "'";
                            stm = conn.createStatement();
                            rs = stm.executeQuery(promote);
                            while (rs.next()) 
                            {
                                int count = rs.getInt("form");
                                int nf = 0;
                                if(count > 1)
                                {
                                   nf = count - 1;
                                }else if(count ==1)
                                {
                                    nf = 1;
                                }else if(count ==4){
                                    nf = 4;
                                }

                                if(nf == 1)
                                {
                                    try {
                                        String setForm = "UPDATE `new_student` SET `form`='" + nf + "'  WHERE `adm` = '" + adm_No.getText() + "'";
                                        pst = conn.prepareStatement(setForm);
                                        pst.execute();
                                            try{
                                                String setForm2 = "UPDATE `student_exam` SET `form`='" + nf + "', `phy`= '0' ,`geo`= '0' ,`his`= '0' ,`cre`= '0' ,`agr`= '0' ,`bus`= '0'   WHERE `adm` = '" + adm_No.getText() + "'";
                                                pst = conn.prepareStatement(setForm2);
                                                pst.execute();
                                            } catch (Exception e) {
                                                e.printStackTrace();
                                            }
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }finally {
                                    try { rs.close(); } catch (Exception e) { /* ignored */ }
                                    try { pst.close(); } catch (Exception e) { /* ignored */ }
                                    try { conn.close(); } catch (Exception e) { /* ignored */ }
                                }
                                }else if(nf == 2)
                                {
                                    try {
                                        String setForm = "UPDATE `new_student` SET `form`='" + nf + "'  WHERE `adm` = '" + adm_No.getText() + "'";
                                        pst = conn.prepareStatement(setForm);
                                        pst.execute();
                                            try{
                                                String setForm2 = "UPDATE `student_exam` SET `form`='" + nf + "', `phy`= '0' ,`geo`= '0' ,`his`= '0' ,`cre`= '0' ,`agr`= '0' ,`bus`= '0'   WHERE `adm` = '" + adm_No.getText() + "'";
                                                pst = conn.prepareStatement(setForm2);
                                                pst.execute();
                                            } catch (Exception e) {
                                                e.printStackTrace();
                                            }
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }else if(nf == 3)
                                {
                                    try {
                                        String setForm = "UPDATE `new_student` SET `form`='" + nf + "'  WHERE `adm` = '" + adm_No.getText() + "'";
                                        pst = conn.prepareStatement(setForm);
                                        pst.execute();
                                            try{
                                                String setForm2 = "UPDATE `student_exam` SET `form`='" + nf + "', `phy`= '-' ,`geo`= '-' ,`his`= '-' ,`cre`= '-' ,`agr`= '-' ,`bus`= '-'   WHERE `adm` = '" + adm_No.getText() + "'";
                                                pst = conn.prepareStatement(setForm2);
                                                pst.execute();
                                            } catch (Exception e) {
                                                e.printStackTrace();
                                            }
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }else if(nf == 4)
                                {
                                    try {
                                        String setForm = "UPDATE `new_student` SET `form`='" + nf + "'  WHERE `adm` = '" + adm_No.getText() + "'";
                                        pst = conn.prepareStatement(setForm);
                                        pst.execute();
                                            try{
                                                String setForm2 = "UPDATE `student_exam` SET `form`='" + nf + "'  WHERE `adm` = '" + adm_No.getText() + "'";
                                                pst = conn.prepareStatement(setForm2);
                                                pst.execute();
                                            } catch (Exception e) {
                                                e.printStackTrace();
                                            }
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }

                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        JOptionPane.showMessageDialog( this, "Student has been demoted successfully.","Success", JOptionPane.PLAIN_MESSAGE);
                        
                      } 
                    }else{
                        JOptionPane.showMessageDialog(this, "Kindly check your exam selection","Error", JOptionPane.ERROR_MESSAGE);
                    }
                }else{
                        JOptionPane.showMessageDialog(this, "Kindly check your form selection","Error", JOptionPane.ERROR_MESSAGE);
                    }
            }else{
                JOptionPane.showMessageDialog(this, "Kindly check your term selection","Error", JOptionPane.ERROR_MESSAGE);
            }
            
        }else{
            JOptionPane.showMessageDialog(this, "Kindly check your year selection","Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_demoteActionPerformed
    public PdfPCell getCell(String text, int alignment) {
        PdfPCell cell = new PdfPCell(new Phrase(text));
        cell.setPadding(0);
        cell.setHorizontalAlignment(alignment);
        cell.setBorder(PdfPCell.NO_BORDER);

        return cell;
    }
    private void rankingKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rankingKeyTyped
        char c = evt.getKeyChar();
        if ((Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        } else if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_rankingKeyTyped

    private void student_nameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_student_nameKeyTyped
        char c = evt.getKeyChar();
        if ((Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        } else if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }//GEN-LAST:event_student_nameKeyTyped

    private void class_reportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_class_reportsActionPerformed
      
        if(!year.getSelectedItem().equals("--Select Year--"))
        {
            if(!term.getSelectedItem().equals("--Select Term--"))
            {
                if(!combo_form.getSelectedItem().equals("--Select Form--"))
                {
                    if(combo_exam.getSelectedItem().equals("AVERAGE"))
                    {
                        
                        DbConnection connect = new DbConnection();
                        conn = connect.Connectdb();
                        //    String name = student_name.getText();
                        JFileChooser fr = new JFileChooser();
                        FileSystemView fw = fr.getFileSystemView();
                        String path = fw.getDefaultDirectory() + "/Unyolo/Report Cards";
                        File file = new File(path);
                        if (!file.exists()) {
                            if (file.mkdir()) {
                                System.out.println("Directory is created!");
                            } else {
                                System.out.println("Failed to create directory!");
                            }
                        }
                        String admNum = adm_No.getText();
                        String year_ = (String) year.getSelectedItem();
                        String term_ = (String) term.getSelectedItem();
                        String forrm = (String) combo_form.getSelectedItem();
                       
                        // String reportNAme = "/Adm No. ";
                        int option = JOptionPane.showConfirmDialog(null, "Are you sure you want to generate the term " + term_ + " \nreport cards for form " + forrm + " students?");
                        if (option == 0) 
                        {
                            String newyr = "", newTerm = "";
                            if (term.getSelectedItem().equals("3") || term.getSelectedItem().equals("2")) 
                            {
                                newyr = (String) year.getSelectedItem();
                                newTerm = (String) term.getSelectedItem();
                            } else if (term.getSelectedItem().equals("1")) 
                            {
                                newyr = String.valueOf(Integer.parseInt((String) year.getSelectedItem()) - 1);
                                newTerm = "3";
                            }
                            clean();
                                              
                          // updateExam ui = new updateExam();
                          // ui.updateMarks( adm, year_, term_,  forrm);
                                            
                            try{
                                String getMe = "SELECT COUNT(adm) FROM `cat_avg` WHERE term = '" + term_ + "' AND yearr = '" + year_ + "' AND form = '" + forrm + "'";
                                stm = conn.createStatement();
                                rs = stm.executeQuery(getMe);
                                while(rs.next())
                                {
                                    String count = rs.getString("COUNT(adm)");
                                    int counter = Integer.parseInt(count);
                                    try{
                                        String getCont = "SELECT * FROM `cat_avg` WHERE term = '" + term_ + "' AND yearr = '" + year_ + "' AND form = '" + forrm + "'";
                                        stm = conn.createStatement();
                                        rs = stm.executeQuery(getCont);
                                        while(rs.next())
                                        {
                                            String adm = rs.getString("adm");
                                            String stream = rs.getString("stream");
                                            String pathToTemp = fw.getDefaultDirectory() + "/Unyolo/Report Cards/" + counter + ".pdf";
                                            counter--;
                                          //   String pathToTemp = fw.getDefaultDirectory() + "/Unyolo/Report Cards/" + admNum + ".pdf";
//                             
                                            updateExam iii = new updateExam();
                                            iii.updateMarks( adm, year_, term_,  forrm);
                           
                                        studentReport1 generateReport = new studentReport1();
                                             generateReport.generate(adm    , year_, term_, forrm, pathToTemp);
                                             
                                            
                                            
                                        }
                                    }catch(Exception e)
                                    {
                                        e.printStackTrace();
                                    }
                                    
                                    String pathToFiles = fw.getDefaultDirectory() + "/Unyolo/Report Cards";
                                    String destination = fw.getDefaultDirectory() + "/Unyolo/Student Report Cards";
                                    String finalDocName =  "Form "+forrm+" Term "+term_+" "+year.getSelectedItem()+" Reportcards.pdf";
                                    try
                                    {
                                        PDFMergerUtility mergePdf = new PDFMergerUtility();
                                        File folder = new File(pathToFiles);
                                        File[] filesInFolder;
                                        filesInFolder = folder.listFiles();
                                        for (File string : filesInFolder)
                                        {
                                            mergePdf.addSource(string);    
                                        }
                                        mergePdf.setDestinationFileName(destination + File.separator + finalDocName);
                                        mergePdf.mergeDocuments();

                                    }
                                    catch(Exception e)
                                    {
                                        e.printStackTrace();
                                    }  
                                    clean();
                                   DisplayTrayIcon.trayIcon.displayMessage("Success!", "Student report cards for form "+forrm+" term "+term_+" have been successfully generated.", TrayIcon.MessageType.INFO);
                                   //
                                    int option2 = JOptionPane.showConfirmDialog(this, "Wouuld you like to view or print the reports?", "System Confirmation", JOptionPane.YES_NO_OPTION);
                                    if (option2 == JOptionPane.YES_OPTION)
                                    {
                                        if(Desktop.isDesktopSupported())
                                        {
                                            try{

                                                File myFile = new File(destination + File.separator + finalDocName);
                                                Desktop.getDesktop().open(myFile);
                                            }catch(Exception e){
                                            JOptionPane.showMessageDialog(null, e);
                                            }
                                        }
                                        
                                    }else if (option2 == JOptionPane.NO_OPTION)
                                    {
                                         JOptionPane.showMessageDialog(null, "Have a nice day! ", "System Notification", JOptionPane.INFORMATION_MESSAGE);

                                    }
                                }
                            }catch(Exception e)
                            {
                            
                            }
                        }
                    }else{
                        JOptionPane.showMessageDialog(this, "Kindly check your exam selection","Error", JOptionPane.ERROR_MESSAGE);
                    }
                }else{
                        JOptionPane.showMessageDialog(this, "Kindly check your form selection","Error", JOptionPane.ERROR_MESSAGE);
                    }
            }else{
                JOptionPane.showMessageDialog(this, "Kindly check your term selection","Error", JOptionPane.ERROR_MESSAGE);
            }
            
        }else{
            JOptionPane.showMessageDialog(this, "Kindly check your year selection","Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_class_reportsActionPerformed
 public void clean()
    {
        JFileChooser fr = new JFileChooser();
        FileSystemView fw = fr.getFileSystemView();
        String path = fw.getDefaultDirectory() + "/Unyolo/Report Cards";

        File file = new File(path);     
        String[] myFiles;   
        if(file.isDirectory())
        {
           myFiles = file.list();
           for (int i=0; i<myFiles.length; i++) 
           {
               File myFile = new File(file, myFiles[i]);
               myFile.delete();
           }
        }
    }
    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        reset();
    }//GEN-LAST:event_jLabel7MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentExamView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentExamView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentExamView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentExamView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                StudentExamView dialog = new StudentExamView(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    private void reset() {

        Grade_Agric.setText(null);

        Grade_Bio.setText(null);
        Grade_Bst.setText(null);
        Grade_CRE.setText(null);
        Grade_Chem.setText(null);

        Grade_Geog.setText(null);
        Grade_History.setText(null);

        Grade_Phy.setText(null);
        Grade_eng.setText(null);
        Grade_kisw.setText(null);
        Grade_math.setText(null);

        Grade_Agric.setText(null);
        Marks_Agric.setText(null);

        Marks_Biology.setText(null);
        Marks_Bus.setText(null);
        Marks_CRE.setText(null);
        Marks_Chem.setText(null);

        Marks_Physics.setText(null);
        class_reports.setEnabled(true);
        Marks_eng.setText(null);
        Marks_geography.setText(null);
        Marks_history.setText(null);
        Marks_kisw.setText(null);
        Marks_mat.setText(null);
        total.setText(null);
        average.setText(null);
        ranking.setText(null);
        grade.setText(null);
        adm_No.setText(null);
        student_name.setText(null);
        combo_exam.setSelectedIndex(0);
        term.setSelectedIndex(0);
        //  combo_Stream.setSelectedIndex(0);
        combo_form.setSelectedIndex(0);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Grade_Agric;
    private javax.swing.JTextField Grade_Bio;
    private javax.swing.JTextField Grade_Bst;
    private javax.swing.JTextField Grade_CRE;
    private javax.swing.JTextField Grade_Chem;
    private javax.swing.JTextField Grade_Geog;
    private javax.swing.JTextField Grade_History;
    private javax.swing.JTextField Grade_Phy;
    private javax.swing.JTextField Grade_eng;
    private javax.swing.JTextField Grade_kisw;
    private javax.swing.JTextField Grade_math;
    private javax.swing.JTextField Marks_Agric;
    private javax.swing.JTextField Marks_Biology;
    private javax.swing.JTextField Marks_Bus;
    private javax.swing.JTextField Marks_CRE;
    private javax.swing.JTextField Marks_Chem;
    private javax.swing.JTextField Marks_Physics;
    private javax.swing.JTextField Marks_eng;
    private javax.swing.JTextField Marks_geography;
    private javax.swing.JTextField Marks_history;
    private javax.swing.JTextField Marks_kisw;
    private javax.swing.JTextField Marks_mat;
    private javax.swing.JTextField adm_No;
    private javax.swing.JTextField average;
    private javax.swing.JButton class_reports;
    private javax.swing.JComboBox combo_exam;
    private javax.swing.JComboBox combo_form;
    private javax.swing.JButton demote;
    private javax.swing.JTextField grade;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JLabel loader;
    private javax.swing.JButton promote;
    private javax.swing.JTextField ranking;
    private javax.swing.JTextField student_name;
    private javax.swing.JComboBox term;
    private javax.swing.JTextField total;
    private javax.swing.JComboBox year;
    // End of variables declaration//GEN-END:variables
}
